#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <termios.h>
#include <gpiod.h>
#include <time.h>

#define BILLION 1000000000L

int main()
{
    const char *port = "/dev/ttyXR0";
    int baudrate = B2000000;
    char buffer[22];

    int fd = open(port, O_RDWR | O_NOCTTY);
    if (fd == -1)
    {
        perror("Error opening serial port");
        return 1;
    }

    struct termios serialConfig;
    if (tcgetattr(fd, &serialConfig) < 0)
    {
        perror("Error getting serial port attributes");
        close(fd);
        return 1;
    }

    // Set baud rate
    cfsetispeed(&serialConfig, baudrate);
    cfsetospeed(&serialConfig, baudrate);

    // Set character size to 8 bits, enable odd parity, and set stop bits to 1
    serialConfig.c_cflag |= CS8 | PARENB | PARODD | CSTOPB;

    // Apply the new settings
    if (tcsetattr(fd, TCSAFLUSH, &serialConfig) < 0)
    {
        perror("Error setting serial port attributes");
        close(fd);
        return 1;
    }

    char data_to_write = 0x0F;

    // Set the desired time interval
    struct timespec sleepTime;
    sleepTime.tv_sec = 0;
    sleepTime.tv_nsec = 1000000; // 1 millisecond

    while (1)
    {
        // Start of 1 millisecond
        nanosleep(&sleepTime, NULL);

        // Write data_to_write to serial port
        if (write(fd, &data_to_write, sizeof(data_to_write)) != sizeof(data_to_write))
        {
            perror("Error writing to serial port");
            close(fd);
            return 1;
        }

        // Read 22 bytes from serial port with a timeout of 10 microseconds
        if (read(fd, buffer, sizeof(buffer)) != sizeof(buffer))
        {
            perror("Error reading from serial port");
            close(fd);
            return 1;
        }

        // End of 1 millisecond
    }

    // Close the serial port
    close(fd);

    return 0;
}
